<?php

use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\Request;
use Drupal\payment_asp\Controller\PaymentASPController;

/**
* Implements hook_form_FORM_ID_alter().
*/
function payment_asp_form_commerce_checkout_flow_multistep_default_alter($form, FormStateInterface $form_state, $form_id) {

	// unset($form['payment_information']);
	// ksm($form['payment_information']);
	// if ($form_id == 'commerce_checkout_flow_multistep_default') {
	// 	$form['terms'] = array(
	// 		'#type' => 'checkbox',
	// 		'#title' => t("THIS IS NEW FORM"),
	// 		'#required' => TRUE,
	// 		'#value' => 'THIS VALUE TERMS',
	// 	);
	// }
}

function payment_asp_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	if ($form_id == 'commerce_checkout_flow_multistep_default') {
		unset($form['payment_information']);
		if ($form['#step_id'] == 'order_information') {
			$block_manager = \Drupal::service('plugin.manager.block');
			// You can hard code configuration or you load from settings.
			$config = [];
			$plugin_block = $block_manager->createInstance('PaymentASP Checkout Block', $config);
			// Some blocks might implement access check.
			$access_result = $plugin_block->access(\Drupal::currentUser());
			// Return empty render array if user doesn't have access.
			// $access_result can be boolean or an AccessResult class
			if (is_object($access_result) && $access_result->isForbidden() || is_bool($access_result) && !$access_result) {
			  // You might need to add some cache tags/contexts.
			  return [];
			}
			$render = $plugin_block->build();
			$form['payment_information'] = $render;
		}
	}
			ksm($form);

	// foreach (array_keys($form['actions']) as $action) {
	//   if ($action == 'next') {
	// 	foreach (array_keys($form['actions']['next']) as $next) {
	// 		if ($next == '#value' && strcmp($form['actions']['next']['#value'], 'Pay and complete purchase') == 0) {
	// 			// var_dump($form['actions']['next']['#submit']);
	// 			// var_dump(strcmp($form['actions']['next']['#value'], 'Continue to review') == 0);
	// 			$form['actions']['next']['#submit'][] = 'payment_asp_form_submit';
	// 		}
	// 	}
	//   }
	// }

}

function payment_asp_form_submit(array $form, FormStateInterface $form_state){
	die("why won't this execute? :(");
	$pc = new PaymentASPController;
	$pc->getOrderDeatilsAPI();
	drupal_set_message("Why won't this message show?   ".$form_state->getValue('terms'));

	// 接続URL
	$url = "https://stbfep.sps-system.com/api/xmlapi.do";

	// // データ送信処理
	// $req =&new HTTP_Request($url);
	// $req->setBasicAuth($merchant_id . $service_id, $hashkey);
	// $req->setMethod(HTTP_REQUEST_METHOD_POST);
	// $req->addHeader("Content-Type", "text/xml");
	// $req->addRawPostData($postdata);
	// $res = $req->sendRequest();

	// // 戻りデータ設定
	// if( !PEAR::isError($res) ) {

	//     if( $req->getResponseCode() == "200" ) {
	//         // SUCCESS
	//         echo $req->getResponseBody();
	//     }
	//     else {
	//         // ERROR
	//     }
	// }
	// else {
	//     // ERROR
	// }
}