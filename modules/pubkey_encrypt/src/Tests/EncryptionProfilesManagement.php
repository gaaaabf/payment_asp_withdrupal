<?php

namespace Drupal\pubkey_encrypt\Tests;

use Drupal\user\Entity\Role;

/**
 * Tests the management of Encryption profiles.
 *
 * @group pubkey_encrypt
 */
class EncryptionProfilesManagement extends PubkeyEncryptTestBase {

  /**
   * Test Encryption profiles.
   */
  public function testEncryptionProfiles() {
    $entity_storage = \Drupal::service('entity.manager')
      ->getStorage('encryption_profile');

    // Create a new role.
    $new_role_id = $this->drupalCreateRole(array());

    // Test the creation of an Encryption Profile for newly generated role.
    $encryption_profile = $entity_storage
      ->load($new_role_id . '_role_key_encryption_profile');
    $this->assertNotNull($encryption_profile, 'Upon creation of a role, a corresponding Encryption Profile gets generated');

    // Remove the role.
    \Drupal::entityTypeManager()
      ->getStorage('user_role')
      ->delete(array(Role::load($new_role_id)));

    // Test the removal of Encryption Profile for the removed role.
    $entity_storage->resetCache();
    $encryption_profile = $entity_storage
      ->load($new_role_id . '_role_key_encryption_profile');
    $this->assertNull($encryption_profile, 'Upon removal of a role, the corresponding Encryption Profile gets removed');

    // Create a role again and fetch the corresponding Encryption Profile.
    $new_role_id = $this->drupalCreateRole(array());
    $entity_storage->resetCache();
    $encryption_profile = $entity_storage
      ->load($new_role_id . '_role_key_encryption_profile');

    // Add a user to the newly created role.
    $user = $this->drupalCreateUser(array());
    $this->drupalLogin($this->rootUser);
    $edit = array();
    $edit['roles[' . $new_role_id . ']'] = $new_role_id;
    $this->drupalPostForm("user/" . $user->id() . "/edit", $edit, t('Save'));

    // Test the working of an Encryption Profile if a user from the
    // corresponding role is logged in.
    $this->drupalLogin($user);
    $original_data = $this->randomString();
    $encrypted_data = \Drupal::service('encryption')
      ->encrypt($original_data, $encryption_profile);
    $decrypted_data = \Drupal::service('encryption')
      ->decrypt($encrypted_data, $encryption_profile);
    $this->assertEqual($original_data, $decrypted_data, "Encryption Profile for a role works for any user from the perspective role");

    // Test the deletion of perspective Encryption Profiles upon module
    // un-installation.
    \Drupal::service('module_installer')->uninstall(array('pubkey_encrypt'));
    $entity_storage->resetCache();
    $encryption_profile = $entity_storage
      ->load($new_role_id . '_role_key_encryption_profile');
    $this->assertNull($encryption_profile, 'Upon module un-installation, all Encryption Profiles generated by the module get deleted');
  }

}
